{"version":3,"file":"static/js/853.85dd1050.chunk.js","mappings":"8bAMaA,EAAQC,EAAAA,GAAAA,MAAH,4FAQLC,EAAeD,EAAAA,GAAAA,IAAH,8NAYZE,GAAcF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,yeAqBXI,GAAgBJ,EAAAA,EAAAA,IAAOK,EAAAA,IAAPL,CAAH,0GAObM,GAAiBN,EAAAA,EAAAA,IAAOO,EAAAA,IAAPP,CAAH,0GAOdQ,GAAoBR,EAAAA,EAAAA,IAAOS,EAAAA,IAAPT,CAAH,0GAOjBU,GAAkBV,EAAAA,EAAAA,IAAOW,EAAAA,IAAPX,CAAH,0GAOfY,EAAeZ,EAAAA,GAAAA,OAAH,ikBAwBZa,EAAQb,EAAAA,GAAAA,EAAH,+F,kFCjGLc,EAAUd,EAAAA,GAAAA,IAAH,mKASPe,EAAQf,EAAAA,GAAAA,GAAH,6K,UCRLgB,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,UAACJ,EAAD,WACGG,IAAS,SAACF,EAAD,UAAQE,IACjBC,IAGN,C,4ICMKC,GAAiBC,EAAAA,EAAAA,IAAO,CAC5BC,MAAMC,EAAAA,EAAAA,MACHC,SAAS,2BACTC,QACC,kIAHE,gJAOHC,IACC,EACA,sEAEDC,OACHC,OAAOL,EAAAA,EAAAA,MACJC,SAAS,2BACTI,MAAM,0BACNH,QACC,2CACA,0BAEJI,UAAUN,EAAAA,EAAAA,MACPC,SAAS,2BACTE,IACC,EACA,8EAEDI,IACC,GACA,+EAIOC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAwBjB,OACE,+BACE,SAAC,KAAD,CACEC,cAAe,CAAEZ,KAAM,GAAIM,MAAO,GAAIC,SAAU,IAChDM,SA1BW,SAAC,EAAD,GAA+C,IAA5Cb,EAA2C,EAA3CA,KAAMM,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcO,EAAgB,EAAhBA,UACvCC,EAAc,CAClBf,KAAAA,EACAM,MAAAA,EACAC,SAAAA,GAEFG,GAASM,EAAAA,EAAAA,IAAWD,IACjBE,SACAC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPC,EAAAA,GAAAA,QAAA,mBAA0BD,EAAKnB,KAA/B,KACD,IACAqB,OAAM,SAAAC,GACG,wCAARA,EACIF,EAAAA,GAAAA,MACE,gGAEFA,EAAAA,GAAAA,MAAY,yCACjB,IAEHN,GACD,EAOKS,iBAAkBzB,EAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,WAAO,QAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACEE,KAAK,OACLwB,KAAK,OACLC,YAAY,0BAEd,SAAC,KAAD,CAAeC,KAAM,SAEvB,SAAC,KAAD,CAAc1B,KAAK,OAAO2B,UAAWnC,EAAAA,SAGvC,UAAC,KAAD,WAAO,SAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACEQ,KAAK,QACLwB,KAAK,QACLC,YAAY,mBAEd,SAAC,KAAD,CAAgBC,KAAM,SAExB,SAAC,KAAD,CAAc1B,KAAK,QAAQ2B,UAAWnC,EAAAA,SAGxC,UAAC,KAAD,WAAO,YAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACEQ,KAAK,WACLwB,KAAK,WACLC,YAAY,iBAEd,SAAC,KAAD,CAAmBC,KAAM,SAE3B,SAAC,KAAD,CAAc1B,KAAK,WAAW2B,UAAWnC,EAAAA,SAG3C,SAAC,KAAD,CAAcgC,KAAK,SAAnB,SAA4B,kBAKrC,E,UClHD,EARiB,WACf,OACE,SAAC7B,EAAA,EAAD,CAASC,MAAM,WAAf,UACE,SAACa,EAAD,KAGL,C","sources":["components/Forms/Form.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","components/Forms/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { AiOutlineUser, AiOutlineMail } from 'react-icons/ai';\nimport { RiLockPasswordLine } from 'react-icons/ri';\nimport { BsTelephone } from 'react-icons/bs';\n\nexport const Label = styled.label`\n  display: block;\n\n  margin-bottom: 28px;\n\n  font-weight: 700;\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n  \n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:has(input:focus) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n\n  width: 100%;\n  border-radius: 8px;\n  border: 1px solid var(--text-black-color);\n  padding: 8px 16px 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n`;\n\nexport const NameInputIcon = styled(AiOutlineUser)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailInputIcon = styled(AiOutlineMail)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const PasswordInputIcon = styled(RiLockPasswordLine)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const NumberInputIcon = styled(BsTelephone)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const SubmitButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n\n  min-width: 140px;\n  border-radius: 18px;\n  border: 2px solid var(--blue-color);\n  padding: 8px 16px;\n  margin: 0 auto;\n\n  color: var(--blue-color);\n  background-color: transparent;\n\n  transition: color var(--transition-duration)\n  var(--transition-timing-function), background-color var(--transition-duration)\n  var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n  color: var(--white-color);\n  background-color: var(--blue-color);\n`;\n\nexport const Error = styled.p`\n  padding: 4px;\n\n  font-weight: 500;\n\n  color: var(--error-color);\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  padding: 40px 20px;\n\n  background-color: var(--white-color);\n  box-shadow: var(--box-shadow);\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 28px;\n\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n  text-transform: uppercase;\n`;\n","import PropTypes from 'prop-types';\nimport { Title, Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { toast } from 'react-hot-toast';\nimport { userSignUp } from 'redux/auth/operations';\nimport {\n  EmailInputIcon,\n  Error,\n  Label,\n  NameInputIcon,\n  PasswordInputIcon,\n  StyledInput,\n  SubmitButton,\n  WrapperInput,\n} from 'components/Forms/Form.styled';\n\nconst registerSchema = object({\n  name: string()\n    .required('This field is required!')\n    .matches(\n      \"^[a-zA-Zа-яА-Я0-9]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]?[- ']*)*$\",\n      `Name may contain only letters, apostrophe, dash and spaces.\n      For example Adrian, Jacob Mercer Charles de Batz de Castelmore d'Artagnan`\n    )\n    .min(\n      2,\n      'The name is short! Please enter a name with at least 2 characters.'\n    )\n    .trim(),\n  email: string()\n    .required('This field is required!')\n    .email('Must be a valid email!')\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      'Must be a valid email!'\n    ),\n  password: string()\n    .required('This field is required!')\n    .min(\n      7,\n      'The password is short! Please enter a password with at least 7 characters.'\n    )\n    .max(\n      18,\n      'The password is long! Please enter a password with at more 18 characters.'\n    ),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = ({ name, email, password }, { resetForm }) => {\n    const credentials = {\n      name,\n      email,\n      password,\n    };\n    dispatch(userSignUp(credentials))\n      .unwrap()\n      .then(({ user }) => {\n        toast.success(`Welcome, ${user.name}!`);\n      })\n      .catch(err => {\n        err === 'Request failed with status code 400'\n          ? toast.error(\n              'Oops, something went wrong. It is likely that a user with this email address already exists.'\n            )\n          : toast.error('Oops, something went wrong. Try again.');\n      });\n\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        onSubmit={onSubmit}\n        validationSchema={registerSchema}\n      >\n        <Form>\n          <Label>\n            Name\n            <WrapperInput>\n              <StyledInput\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"First name Last name\"\n              />\n              <NameInputIcon size={18} />\n            </WrapperInput>\n            <ErrorMessage name=\"name\" component={Error} />\n          </Label>\n\n          <Label>\n            Email\n            <WrapperInput>\n              <StyledInput\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"user@mail.com\"\n              />\n              <EmailInputIcon size={18} />\n            </WrapperInput>\n            <ErrorMessage name=\"email\" component={Error} />\n          </Label>\n\n          <Label>\n            Password\n            <WrapperInput>\n              <StyledInput\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"password123\"\n              />\n              <PasswordInputIcon size={18} />\n            </WrapperInput>\n            <ErrorMessage name=\"password\" component={Error} />\n          </Label>\n\n          <SubmitButton type=\"submit\">Sign up</SubmitButton>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/Forms/RegisterForm';\nimport { Section } from 'components/Section/Section';\n\nconst Register = () => {\n  return (\n    <Section title=\"Register\">\n      <RegisterForm />\n    </Section>\n  );\n};\n\nexport default Register;\n"],"names":["Label","styled","WrapperInput","StyledInput","Field","NameInputIcon","AiOutlineUser","EmailInputIcon","AiOutlineMail","PasswordInputIcon","RiLockPasswordLine","NumberInputIcon","BsTelephone","SubmitButton","Error","Wrapper","Title","Section","title","children","registerSchema","object","name","string","required","matches","min","trim","email","password","max","RegisterForm","dispatch","useDispatch","initialValues","onSubmit","resetForm","credentials","userSignUp","unwrap","then","user","toast","catch","err","validationSchema","type","placeholder","size","component"],"sourceRoot":""}